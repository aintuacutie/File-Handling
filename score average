#include <iostream>
#include <fstream>
#include <string>

using namespace std;
struct Player {
    string nickname;   	    int age;
    double scores[5];
};

struct Node {
    Player player;
    Node* next;
};
Node* head = nullptr;
void addRecord(const Player& player) {
    Node* newNode = new Node;
    newNode->player = player;
    newNode->next = head;
    head = newNode;
}
void viewRecords() {
    Node* current = head;
    while (current != nullptr) {
        cout << "Nickname: " << current->player.nickname << endl;
        cout << "Age: " << current->player.age << endl;
        cout << "Scores: ";
        for (int i = 0; i < 5; ++i) {
            cout << current->player.scores[i] << " ";
        }
        cout << endl;
        cout << "----------------------------------" << endl;
        current = current->next;
    }
}
void computeAverage() {
    Node* current = head;
    while (current != nullptr) {
        double sum = 0;
        for (int i = 0; i < 5; ++i) {
            sum += current->player.scores[i];
        }
        double average = sum / 5.0;
        cout << "Nickname: " << current->player.nickname << endl;
        cout << "Average Score: " << average << endl;
        cout << "----------------------------------" << endl;
        current = current->next;
    }
}
void showMaxAverage() {
    Node* current = head;
    double maxAverage = -1; // Initialize to a non-valid value
    while (current != nullptr) {
        double sum = 0;
        for (int i = 0; i < 5; ++i) {
            sum += current->player.scores[i];
}
double average = sum / 5.0;
        if (average > maxAverage) {
maxAverage = average;
}
current = current->next;
}
// Now, iterate again to display players with the max average
current = head;
while (current != nullptr) {
    double sum = 0;
    for (int i = 0; i < 5; ++i) {
        sum += current->player.scores[i];
}
double average = sum / 5.0;
    if (average == maxAverage) {
cout << "Nickname: " << current->player.nickname << endl;
cout << "Average Score: " << average << endl;
cout << "----------------------------------" << endl;
}
current = current->next;
}
}
void showMinAverage() {
    Node* current = head;
    double minAverage = 100; // Initialize to a value higher than the possible average
     while (current != nullptr) {
         double sum = 0;
         for (int i = 0; i < 5; ++i) {
             sum += current->player.scores[i];
}
double average = sum / 5.0;
         if (average < minAverage) {
            minAverage = average;
}
current = current->next;
}
// Now, iterate again to display players with the min average
current = head;
while (current != nullptr) {
    double sum = 0;
    for (int i = 0; i < 5; ++i) {
        sum += current->player.scores[i];
}
double average = sum / 5.0;
    if (average == minAverage) {
cout << "Nickname: " << current->player.nickname << endl;
cout << "Average Score: " << average << endl;
cout << "----------------------------------" << endl;
}
current = current->next;
}
}
void openFile() {
    ofstream outFile("player_records.txt");
    Node* current = head;
    while (current != nullptr) {
        outFile << current->player.nickname << endl;
        outFile << current->player.age << endl;
        for (int i = 0; i < 5; ++i) {
            outFile << current->player.scores[i] << " ";
        }
        outFile << endl;
        current = current->next;
    }
    outFile.close();
    cout << "Records saved to 'player_records.txt'." << endl;
}

// Function to indicate closing the file void
void closeFile() {
cout << "File closed." << endl;
}
int main() {
    int choice;
    do {
        cout << "1. Add Record" << endl;
        cout << "2. View Records" << endl;
        cout << "3. Compute Average" << endl;
        cout << "4. Show Player(s) with Maximum Average" << endl;
        cout << "5. Show Player(s) with Minimum Average" << endl;
        cout << "6. Open File" << endl;
        cout << "7. Close File" << endl;
        cout << "8. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1: {
                Player newPlayer;
                cout << "Enter Nickname: ";
                cin >> newPlayer.nickname;
                cout << "Enter Age: ";
                cin >> newPlayer.age;
                cout << "Enter Scores (5 scores separated by space): ";
                for (int i = 0; i < 5; ++i) {
                    cin >> newPlayer.scores[i];
                }
                addRecord(newPlayer);
                break;
            }
            case 2:
                viewRecords();
                break;
            case 3:
                computeAverage();
                break;
            case 4:
                showMaxAverage();
                break;
            case 5:
                showMinAverage();
                break;
            case 6:
                openFile();
                break;
            case 7:
                closeFile();
                break;
            case 8:
                cout << "Exiting program..." << endl;
                break;
            default:
                cout << "Invalid choice. Please try again." << endl;
        }
    } while (choice != 8);

    return 0;
}
